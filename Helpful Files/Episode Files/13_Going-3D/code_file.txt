{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww37900\viewh19880\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0     override func createVertices() \{\
        vertices = [\
            //Left\
            Vertex(position: float3(-1.0,-1.0,-1.0), color: float4(1.0, 0.5, 0.0, 1.0)),\
            Vertex(position: float3(-1.0,-1.0, 1.0), color: float4(0.0, 1.0, 0.5, 1.0)),\
            Vertex(position: float3(-1.0, 1.0, 1.0), color: float4(0.0, 0.5, 1.0, 1.0)),\
            Vertex(position: float3(-1.0,-1.0,-1.0), color: float4(1.0, 1.0, 0.0, 1.0)),\
            Vertex(position: float3(-1.0, 1.0, 1.0), color: float4(0.0, 1.0, 1.0, 1.0)),\
            Vertex(position: float3(-1.0, 1.0,-1.0), color: float4(1.0, 0.0, 1.0, 1.0)),\
            \
            //RIGHT\
            Vertex(position: float3( 1.0, 1.0, 1.0), color: float4(1.0, 0.0, 0.5, 1.0)),\
            Vertex(position: float3( 1.0,-1.0,-1.0), color: float4(0.0, 1.0, 0.0, 1.0)),\
            Vertex(position: float3( 1.0, 1.0,-1.0), color: float4(0.0, 0.5, 1.0, 1.0)),\
            Vertex(position: float3( 1.0,-1.0,-1.0), color: float4(1.0, 1.0, 0.0, 1.0)),\
            Vertex(position: float3( 1.0, 1.0, 1.0), color: float4(0.0, 1.0, 1.0, 1.0)),\
            Vertex(position: float3( 1.0,-1.0, 1.0), color: float4(1.0, 0.5, 1.0, 1.0)),\
            \
            //TOP\
            Vertex(position: float3( 1.0, 1.0, 1.0), color: float4(1.0, 0.0, 0.0, 1.0)),\
            Vertex(position: float3( 1.0, 1.0,-1.0), color: float4(0.0, 1.0, 0.0, 1.0)),\
            Vertex(position: float3(-1.0, 1.0,-1.0), color: float4(0.0, 0.0, 1.0, 1.0)),\
            Vertex(position: float3( 1.0, 1.0, 1.0), color: float4(1.0, 1.0, 0.0, 1.0)),\
            Vertex(position: float3(-1.0, 1.0,-1.0), color: float4(0.5, 1.0, 1.0, 1.0)),\
            Vertex(position: float3(-1.0, 1.0, 1.0), color: float4(1.0, 0.0, 1.0, 1.0)),\
            \
            //BOTTOM\
            Vertex(position: float3( 1.0,-1.0, 1.0), color: float4(1.0, 0.5, 0.0, 1.0)),\
            Vertex(position: float3(-1.0,-1.0,-1.0), color: float4(0.5, 1.0, 0.0, 1.0)),\
            Vertex(position: float3( 1.0,-1.0,-1.0), color: float4(0.0, 0.0, 1.0, 1.0)),\
            Vertex(position: float3( 1.0,-1.0, 1.0), color: float4(1.0, 1.0, 0.5, 1.0)),\
            Vertex(position: float3(-1.0,-1.0, 1.0), color: float4(0.0, 1.0, 1.0, 1.0)),\
            Vertex(position: float3(-1.0,-1.0,-1.0), color: float4(1.0, 0.5, 1.0, 1.0)),\
            \
            //BACK\
            Vertex(position: float3( 1.0, 1.0,-1.0), color: float4(1.0, 0.5, 0.0, 1.0)),\
            Vertex(position: float3(-1.0,-1.0,-1.0), color: float4(0.5, 1.0, 0.0, 1.0)),\
            Vertex(position: float3(-1.0, 1.0,-1.0), color: float4(0.0, 0.0, 1.0, 1.0)),\
            Vertex(position: float3( 1.0, 1.0,-1.0), color: float4(1.0, 1.0, 0.0, 1.0)),\
            Vertex(position: float3( 1.0,-1.0,-1.0), color: float4(0.0, 1.0, 1.0, 1.0)),\
            Vertex(position: float3(-1.0,-1.0,-1.0), color: float4(1.0, 0.5, 1.0, 1.0)),\
            \
            //FRONT\
            Vertex(position: float3(-1.0, 1.0, 1.0), color: float4(1.0, 0.5, 0.0, 1.0)),\
            Vertex(position: float3(-1.0,-1.0, 1.0), color: float4(0.0, 1.0, 0.0, 1.0)),\
            Vertex(position: float3( 1.0,-1.0, 1.0), color: float4(0.5, 0.0, 1.0, 1.0)),\
            Vertex(position: float3( 1.0, 1.0, 1.0), color: float4(1.0, 1.0, 0.5, 1.0)),\
            Vertex(position: float3(-1.0, 1.0, 1.0), color: float4(0.0, 1.0, 1.0, 1.0)),\
            Vertex(position: float3( 1.0,-1.0, 1.0), color: float4(1.0, 0.0, 1.0, 1.0))\
        ]\
    \}\
\
\
\
    //https://gamedev.stackexchange.com/questions/120338/what-does-a-perspective-projection-matrix-look-like-in-opengl\
    static func perspective(degreesFov: Float, aspectRatio: Float, near: Float, far: Float)->matrix_float4x4\{\
        let fov = degreesFov.toRadians\
        \
        let t: Float = tan(fov / 2)\
        \
        let x: Float = 1 / (aspectRatio * t)\
        let y: Float = 1 / t\
        let z: Float = -((far + near) / (far - near))\
        let w: Float = -((2 * far * near) / (far - near))\
        \
        var result = matrix_identity_float4x4\
        result.columns = (\
            float4(x,  0,  0,   0),\
            float4(0,  y,  0,   0),\
            float4(0,  0,  z,  -1),\
            float4(0,  0,  w,   0)\
        )\
        return result\
    \}\
    \
\}\
\
extension Float \{\
    \
    var toRadians: Float\{\
        return (self / 180.0) * Float.pi\
    \}\
    \
    var toDegrees: Float\{\
        return self * (180.0 / Float.pi)\
    \}\
\
\}\
\
\
\
enum DepthStencilStateTypes \{\
    case Less\
\}\
\
class DepthStencilStateLibrary \{\
    \
    private static var _depthStencilStates: [DepthStencilStateTypes: DepthStencilState] = [:]\
    \
    public static func Intialize()\{\
        createDefaultDepthStencilStates()\
    \}\
    \
    private static func createDefaultDepthStencilStates()\{\
        _depthStencilStates.updateValue(Less_DepthStencilState(), forKey: .Less)\
    \}\
    \
    public static func DepthStencilState(_ depthStencilStateType: DepthStencilStateTypes)->MTLDepthStencilState\{\
        return _depthStencilStates[depthStencilStateType]!.depthStencilState\
    \}\
    \
\}\
\
protocol DepthStencilState \{\
    var depthStencilState: MTLDepthStencilState! \{ get \}\
\}\
\
class Less_DepthStencilState: DepthStencilState \{\
    \
    var depthStencilState: MTLDepthStencilState!\
    \
    init() \{\
        let depthStencilDescriptor = MTLDepthStencilDescriptor()\
        depthStencilDescriptor.isDepthWriteEnabled = true\
        depthStencilDescriptor.depthCompareFunction = .less\
        depthStencilState = Engine.Device.makeDepthStencilState(descriptor: depthStencilDescriptor)\
    \}\
    \
\}\
}